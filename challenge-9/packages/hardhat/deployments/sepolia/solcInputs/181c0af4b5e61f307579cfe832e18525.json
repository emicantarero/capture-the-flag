{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"
    },
    "contracts/DEX.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.8.0 <0.9.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\ncontract DEX {\n    /* ========== GLOBAL VARIABLES ========== */\n\n    IERC20 public token; \n    uint256 public totalLiquidity; \n    mapping(address => uint256) public liquidity;\n\n    /* ========== EVENTS ========== */\n    event EthToTokenSwap(address indexed swapper, uint256 tokenOutput, uint256 ethInput);\n    event TokenToEthSwap(address indexed swapper, uint256 tokensInput, uint256 ethOutput);\n    event LiquidityProvided(address indexed provider, uint256 liquidityMinted, uint256 ethInput, uint256 tokensInput);\n    event LiquidityRemoved(address indexed remover, uint256 liquidityWithdrawn, uint256 ethOutput, uint256 tokenOutput);\n\n    /* ========== CONSTRUCTOR ========== */\n    constructor(address tokenAddr) {\n        token = IERC20(tokenAddr);\n    }\n\n    /* ========== MUTATIVE FUNCTIONS ========== */\n\n    /**\n     * @notice Inicializa el contrato DEX con liquidez inicial\n     * @param tokens Cantidad de tokens ERC20 transferidos al DEX\n     * @return totalLiquidity Devuelve la liquidez total inicial creada\n     */\n    function init(uint256 tokens) public payable returns (uint256) {\n        require(totalLiquidity == 0, \"DEX: init - already has liquidity\");\n        totalLiquidity = address(this).balance;\n        liquidity[msg.sender] = totalLiquidity;\n        require(token.transferFrom(msg.sender, address(this), tokens), \"DEX: init - transfer did not transact\");\n        return totalLiquidity;\n    }\n\n    /**\n     * @notice Calcula la cantidad de tokens o ETH a intercambiar según el modelo de curva constante\n     * @param xInput Monto de entrada\n     * @param xReserves Reservas del activo de entrada\n     * @param yReserves Reservas del activo de salida\n     * @return yOutput Monto del activo de salida\n     */\n    function price(\n        uint256 xInput,\n        uint256 xReserves,\n        uint256 yReserves\n    ) public pure returns (uint256 yOutput) {\n        uint256 xInputWithFee = xInput * 997;\n        uint256 numerator = xInputWithFee * yReserves;\n        uint256 denominator = (xReserves * 1000) + xInputWithFee;\n        return (numerator / denominator);\n    }\n\n    /**\n     * @notice Devuelve la liquidez de un usuario\n     * @param lp Dirección del proveedor de liquidez\n     * @return Liquidez del usuario\n     */\n    function getLiquidity(address lp) public view returns (uint256) {\n        return liquidity[lp];\n    }\n\n    /**\n     * @notice Intercambia ETH por tokens\n     * @return tokenOutput Cantidad de tokens recibidos\n     */\n    function ethToToken() public payable returns (uint256 tokenOutput) {\n        require(msg.value > 0, \"cannot swap 0 ETH\");\n        uint256 ethReserve = address(this).balance - msg.value;\n        uint256 tokenReserve = token.balanceOf(address(this));\n        tokenOutput = price(msg.value, ethReserve, tokenReserve);\n\n        require(token.transfer(msg.sender, tokenOutput), \"ethToToken(): reverted swap.\");\n        emit EthToTokenSwap(msg.sender, tokenOutput, msg.value);\n        return tokenOutput;\n    }\n\n    /**\n     * @notice Intercambia tokens por ETH\n     * @param tokenInput Cantidad de tokens a intercambiar\n     * @return ethOutput Cantidad de ETH recibidos\n     */\n    function tokenToEth(uint256 tokenInput) public returns (uint256 ethOutput) {\n        require(tokenInput > 0, \"cannot swap 0 tokens\");\n        uint256 tokenReserve = token.balanceOf(address(this));\n        ethOutput = price(tokenInput, tokenReserve, address(this).balance);\n        require(token.transferFrom(msg.sender, address(this), tokenInput), \"tokenToEth(): reverted swap.\");\n        (bool sent, ) = msg.sender.call{ value: ethOutput }(\"\");\n        require(sent, \"tokenToEth: revert in transferring eth to you!\");\n        emit TokenToEthSwap(msg.sender, tokenInput, ethOutput);\n        return ethOutput;\n    }\n\n    /**\n     * @notice Proporciona liquidez al pool\n     * @return tokensDeposited Cantidad de tokens depositados\n     */\n    function deposit() public payable returns (uint256 tokensDeposited) {\n        require(msg.value > 0, \"Must send value when depositing\");\n        uint256 ethReserve = address(this).balance - msg.value;\n        uint256 tokenReserve = token.balanceOf(address(this));\n        uint256 tokenDeposit;\n\n        tokenDeposit = (msg.value * tokenReserve / ethReserve) + 1;\n\n        uint256 liquidityMinted = msg.value * totalLiquidity / ethReserve;\n        liquidity[msg.sender] += liquidityMinted;\n        totalLiquidity += liquidityMinted;\n\n        require(token.transferFrom(msg.sender, address(this), tokenDeposit));\n        emit LiquidityProvided(msg.sender, liquidityMinted, msg.value, tokenDeposit);\n        return tokenDeposit;\n    }\n\n    /**\n     * @notice Retira liquidez del pool\n     * @param amount Cantidad de liquidez a retirar\n     * @return ethAmount Cantidad de ETH recibida\n     * @return tokenAmount Cantidad de tokens recibida\n     */\n    function withdraw(uint256 amount) public returns (uint256 ethAmount, uint256 tokenAmount) {\n        require(liquidity[msg.sender] >= amount, \"withdraw: sender does not have enough liquidity to withdraw.\");\n        uint256 ethReserve = address(this).balance;\n        uint256 tokenReserve = token.balanceOf(address(this));\n        uint256 ethWithdrawn;\n\n        ethWithdrawn = amount * ethReserve / totalLiquidity;\n\n        uint256 tokenAmount = amount * tokenReserve / totalLiquidity;\n        liquidity[msg.sender] -= amount;\n        totalLiquidity -= amount;\n        (bool sent, ) = payable(msg.sender).call{ value: ethWithdrawn }(\"\");\n        require(sent, \"withdraw(): revert in transferring eth to you!\");\n        require(token.transfer(msg.sender, tokenAmount));\n        emit LiquidityRemoved(msg.sender, amount, tokenAmount, ethWithdrawn);\n        return (ethWithdrawn, tokenAmount);\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}